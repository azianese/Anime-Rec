<!DOCTYPE html>
<html>
  <head>
    <!--Page Metadata-->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="author" content="Sam Wang"> 
    <meta name="description" content="anime recommender">
    <meta name="keywords" content="anime, recommender, suggestions, anime recommender">
    <title>Anime recommender</title>
    <!--Stylesheets-->
    <link rel="stylesheet" href="css/search.css">
    <!--For the title font-->
    <link href="https://fonts.googleapis.com/css?family=Indie+Flower" rel="stylesheet">

    <!--Include jquery autocomplete library-->
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
  </head>

  <body>
    <div class="container">

      <form id="search-form" method="POST" action="/rec">
        Form based on:<br>
        <input type='text' placeholder="" value='<%= data.formTitles %>'><br>

        <div class='type1'>
          How many recommendations do you want?:<br>
          <input type='number' min='1' max='500' value='10' name='numRecs' placeholder='0-500'><br>
        </div>

        <div class='type2' id='years'>
          Min Year:<br>
          <input type='number' min='0' max='9999' value='0' name='minYear'><br>

          Max Year:<br>
          <input type='number' min='0' max='9999' value='2018' name='maxYear'><br>
        </div>

        <div class='type1' id='votes'>
          Min Votes:<br>
          <input type='number' min='0' max='999999' value='0' name='minVotes'><br>

          Max Votes:<br>
          <input type='number' min='0' max='999999' value='999999' name='maxVotes'><br>
        </div>

        <div class='type2' id='genres_themes'>
          Genres:<br>
          <input type='text' id='genreSearch' name='genres' placeholder='Separate genres by coma...' value='<%= data.formGenres %>'><br>

          Themes:<br>
          <input type='text' id='themeSearch' name='themes' placeholder='Separate themes by coma...' value='<%= data.formThemes %>'><br>
        </div>

        <div class='type1' id='director_studio'>
          Directors:<br>
          <input type='text' id='directorSearch' name='directors' placeholder='Separate directors by coma...' value='<%= data.formDirectors %>'><br>

          Studios:<br>
          <input type='text' id='studioSearch' name='studios' placeholder='Separate studios by coma...' value='<%= data.formStudios %>'><br>
        </div>

        <input class='button' type='submit' value='Submit'>
      </form>

    </div>

    <!---------------------- AUTOCOMPLETE SCRIPTS ---------------------->
    <script>
      ////////// DIRECTOR //////////
      $(function() {        
        var dataArray = <%- JSON.stringify(data.directors) %>;
        $( "#directorSearch" )
        // don't navigate away from the field on tab when selecting an item
          .on( "keydown", function( event ) {
          if ( event.keyCode === $.ui.keyCode.TAB &&
              $( this ).autocomplete( "instance" ).menu.active ) {
            event.preventDefault();
          }
        })
          .autocomplete({
          minLength: 0,
          source: function( request, response ) {
            // delegate back to autocomplete, but extract the last term
            response( $.ui.autocomplete.filter(
              dataArray, extractLast( request.term ) ) );
          },
          focus: function() {
            // prevent value inserted on focus
            return false;
          },
          select: function( event, ui ) {
            var terms = split( this.value );
            // remove the current input
            terms.pop();
            // add the selected item
            terms.push( ui.item.value );
            // add placeholder to get the comma-and-space at the end
            terms.push( "" );
            this.value = terms.join( ", " );
            return false;
          }
        })
        function split(val) {
          return val.split(",").map(item => item.trim());
        }
        function extractLast(term) {
          return split(term).pop().trim();
        };
      })
      ////////// STUDIO //////////
      $(function() {
        var dataArray = <%- JSON.stringify(data.studios) %>;
        $( "#studioSearch" )
        // don't navigate away from the field on tab when selecting an item
          .on( "keydown", function( event ) {
          if ( event.keyCode === $.ui.keyCode.TAB &&
              $( this ).autocomplete( "instance" ).menu.active ) {
            event.preventDefault();
          }
        })
          .autocomplete({
          minLength: 0,
          source: function( request, response ) {
            // delegate back to autocomplete, but extract the last term
            response( $.ui.autocomplete.filter(
              dataArray, extractLast( request.term ) ) );
          },
          focus: function() {
            // prevent value inserted on focus
            return false;
          },
          select: function( event, ui ) {
            var terms = split( this.value );
            // remove the current input
            terms.pop();
            // add the selected item
            terms.push( ui.item.value );
            // add placeholder to get the comma-and-space at the end
            terms.push( "" );
            this.value = terms.join( ", " );
            return false;
          }
        })
        function split(val) {
          return val.split(",").map(item => item.trim());
        }
        function extractLast(term) {
          return split(term).pop().trim();
        };
      })
      ////////// GENRE //////////
      $(function() {
        var dataArray = <%- JSON.stringify(data.genres) %>;
        $( "#genreSearch" )
        // don't navigate away from the field on tab when selecting an item
          .on( "keydown", function( event ) {
          if ( event.keyCode === $.ui.keyCode.TAB &&
              $( this ).autocomplete( "instance" ).menu.active ) {
            event.preventDefault();
          }
        })
          .autocomplete({
          minLength: 0,
          source: function( request, response ) {
            // delegate back to autocomplete, but extract the last term
            response( $.ui.autocomplete.filter(
              dataArray, extractLast( request.term ) ) );
          },
          focus: function() {
            // prevent value inserted on focus
            return false;
          },
          select: function( event, ui ) {
            var terms = split( this.value );
            // remove the current input
            terms.pop();
            // add the selected item
            terms.push( ui.item.value );
            // add placeholder to get the comma-and-space at the end
            terms.push( "" );
            this.value = terms.join( ", " );
            return false;
          }
        })
        function split(val) {
          return val.split(",").map(item => item.trim());
        }
        function extractLast(term) {
          return split(term).pop().trim();
        };
      })
      ////////// THEME //////////
      $(function() {
        var dataArray = <%- JSON.stringify(data.themes) %>;
        $( "#themeSearch" )
        // don't navigate away from the field on tab when selecting an item
          .on( "keydown", function( event ) {
          if ( event.keyCode === $.ui.keyCode.TAB &&
              $( this ).autocomplete( "instance" ).menu.active ) {
            event.preventDefault();
          }
        })
          .autocomplete({
          minLength: 0,
          source: function( request, response ) {
            // delegate back to autocomplete, but extract the last term
            response( $.ui.autocomplete.filter(
              dataArray, extractLast( request.term ) ) );
          },
          focus: function() {
            // prevent value inserted on focus
            return false;
          },
          select: function( event, ui ) {
            var terms = split( this.value );
            // remove the current input
            terms.pop();
            // add the selected item
            terms.push( ui.item.value );
            // add placeholder to get the comma-and-space at the end
            terms.push( "" );
            this.value = terms.join( ", " );
            return false;
          }
        })
        function split(val) {
          return val.split(",").map(item => item.trim());
        }
        function extractLast(term) {
          return split(term).pop().trim();
        };
      })
    </script>
  </body>
</html>